class JackpotService {
  // Aktuelle Jackpot-Daten abrufen
  Future<Map<String, dynamic>> getCurrentJackpots() async {
    final now = DateTime.now();
    final nextFriday = _getNextWeekday(now, 5); // Freitag
    final nextTuesday = _getNextWeekday(now, 2); // Dienstag
    
    return {
    final nextWednesday = _getNextWeekday(now, 3); // Mittwoch
      'lotto6aus49': {
        'amount': 8000000, // 8 Millionen Euro - realistischer Jackpot
        'currency': 'EUR',
        'nextDraw': nextWednesday.toIso8601String(), // Nächster Mittwoch
        'game': 'Lotto 6aus49',
        'gameName': 'Lotto 6aus49'
      },
      'eurojackpot': {
        'amount': 28000000, // 28 Millionen Euro - realistischer Jackpot
        'currency': 'EUR', 
        'nextDraw': nextFriday.toIso8601String(), // Nächster Freitag
        'game': 'Eurojackpot',
        'gameName': 'Eurojackpot'
      }
    };
  }
  
  // Hilfsfunktion für nächsten Wochentag
  DateTime _getNextWeekday(DateTime from, int weekday) {
    var date = DateTime(from.year, from.month, from.day);
    while (date.weekday != weekday) {
      date = date.add(const Duration(days: 1));
    }
    return date;
  }
  
  // Prüfen ob Jackpot hoch ist
  bool isJackpotHigh(Map<String, dynamic> jackpot, int threshold) {
    return jackpot['amount'] >= threshold;
  }

  // Formatierte Anzeige des Betrags
  String formatJackpotAmount(int amount) {
    if (amount >= 1000000) {
      return '${(amount / 1000000).toStringAsFixed(1)} Mio. €'; // € statt $
    } else if (amount >= 1000) {
      return '${(amount / 1000).toStringAsFixed(0)} T €'; // € statt $
    }
    return '$amount €'; // € statt $
  }

  // Nächste Ziehung formatieren
  String formatNextDraw(String drawDate) {
    final date = DateTime.parse(drawDate);
    return '${date.day}.${date.month}.${date.year} ${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }
}
