import 'package:flutter/material.dart';
import '../services/lotto_system_service.dart';
import '../services/jackpot_service.dart';
import '../services/language_service.dart';
import 'lotto_tip_screen.dart';

class JackpotOverviewScreen extends StatefulWidget {
  const JackpotOverviewScreen({super.key});

  @override
  State<JackpotOverviewScreen> createState() => _JackpotOverviewScreenState();
}

class _JackpotOverviewScreenState extends State<JackpotOverviewScreen> {
  final LanguageService _languageService = LanguageService();
  final List<LottoSystem> _systems = LottoSystemService.getAvailableSystems();
  LottoSystem? _selectedSystem;

  void _handleSystemSelected(LottoSystem system) {
    setState(() {
      _selectedSystem = system;
    });
  }

  void _handleBackToOverview() {
    setState(() {
      _selectedSystem = null;
    });
  }

  Widget _buildSystemCard(LottoSystem system) {
    final jackpotData = JackpotService.getJackpotData(system.id);
    final currentJackpot = jackpotData['currentJackpot'] ?? 'N/A';
    final nextDraw = jackpotData['nextDraw'] as DateTime;
    final countdown = JackpotService.getCountdown(nextDraw);
    final lastDraws = List<Map<String, dynamic>>.from(jackpotData['lastDraws'] ?? []);
    final lastDraw = lastDraws.isNotEmpty ? lastDraws.first : null;

    return Card(
      elevation: 4,
      margin: const EdgeInsets.only(bottom: 16),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header mit Systemname und Jackpot
            Row(
              children: [
                Container(
                  width: 50,
                  height: 50,
                  decoration: BoxDecoration(
                    color: system.primaryColor,
                    shape: BoxShape.circle,
                  ),
                  child: Center(
                    child: Text(
                      system.name.substring(0, 1),
                      style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        system.name,
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        system.description,
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey.shade600,
                        ),
                      ),
                    ],
                  ),
                ),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    Text(
                      'Jackpot',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey.shade600,
                      ),
                    ),
                    Text(
                      currentJackpot,
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.green.shade700,
                      ),
                    ),
                  ],
                ),
              ],
            ),

            const SizedBox(height: 16),

            // Zahlenbereich Info
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Column(
                    children: [
                      Text(
                        'Hauptzahlen',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey.shade600,
                        ),
                      ),
                      Text(
                        '${system.mainNumbersCount} aus ${system.mainNumbersMax}',
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  if (system.hasBonusNumbers) ...[
                    Column(
                      children: [
                        Text(
                          'Bonus',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        Text(
                          '${system.bonusNumbersCount} aus ${system.bonusNumbersMax}',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ],
                  Column(
                    children: [
                      Text(
                        'Ziehung',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey.shade600,
                        ),
                      ),
                      Text(
                        system.schedule,
                        style: const TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ],
                ],
              ),
            ),

            const SizedBox(height: 16),

            // Letzte Ziehung
            if (lastDraw != null) ...[
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Letzte Ziehung:',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Wrap(
                    spacing: 6,
                    runSpacing: 6,
                    children: (lastDraw['numbers'] as List<int>).map((number) {
                      return Container(
                        width: 32,
                        height: 32,
                        decoration: BoxDecoration(
                          color: system.primaryColor,
                          shape: BoxShape.circle,
                        ),
                        child: Center(
                          child: Text(
                            number.toString(),
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                  if (lastDraw['bonusNumbers'] != null) ...[
                    const SizedBox(height: 8),
                    Wrap(
                      spacing: 6,
                      children: (lastDraw['bonusNumbers'] as List<int>).map((number) {
                        return Container(
                          width: 32,
                          height: 32,
                          decoration: BoxDecoration(
                            color: Colors.orange.shade400,
                            shape: BoxShape.circle,
                          ),
                          child: Center(
                            child: Text(
                              number.toString(),
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                  if (lastDraw['superzahl'] != null) ...[
                    const SizedBox(height: 8),
                    Container(
                      width: 32,
                      height: 32,
                      decoration: BoxDecoration(
                        color: Colors.purple.shade400,
                        shape: BoxShape.circle,
                      ),
                      child: Center(
                        child: Text(
                          lastDraw['superzahl'].toString(),
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                  ],
                ],
              ),
              const SizedBox(height: 16),
            ],

            // Countdown und Auswahl-Button
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange.shade200),
              ),
              child: Row(
                children: [
                  const Icon(Icons.access_time, color: Colors.orange, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Nächste Ziehung:',
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          countdown,
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                            color: Colors.orange.shade700,
                          ),
                        ),
                      ],
                    ),
                  ),
                  ElevatedButton(
                    onPressed: () => _handleSystemSelected(system),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: system.primaryColor,
                      foregroundColor: Colors.white,
                    ),
                    child: const Text('Tipp erstellen'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_selectedSystem != null) {
      return LottoTipScreen(
        selectedSystem: _selectedSystem!,
        onBack: _handleBackToOverview,
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(_languageService.getTranslation('appTitle')),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Theme.of(context).colorScheme.onPrimary,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            Card(
              color: Colors.blue.shade50,
              child: const Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Icon(Icons.celebration, size: 48, color: Colors.blue),
                    SizedBox(height: 8),
                    Text(
                      'Lotto World Pro',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue,
                      ),
                    ),
                    SizedBox(height: 4),
                    Text(
                      'Wähle dein Lotto-System und erstelle Tipps',
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.blue,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),

            // System Cards
            ..._systems.map((system) => _buildSystemCard(system)).toList(),

            const SizedBox(height: 20),

            // Info Footer
            Card(
              color: Colors.grey.shade50,
              child: const Padding(
                padding: EdgeInsets.all(12.0),
                child: Text(
                  '💡 Tipp: Wähle ein Lotto-System aus um Tipps zu generieren. '
                  'Alle Jackpots und Ziehungszeiten werden regelmäßig aktualisiert.',
                  style: TextStyle(fontSize: 12, color: Colors.grey),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
